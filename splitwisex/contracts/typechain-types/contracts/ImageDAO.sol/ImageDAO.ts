/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ImageDAO {
  export type ImageDataStruct = {
    id: BigNumberish;
    uploader: AddressLike;
    lighthouseCID: string;
    metadata: string;
    uploadTime: BigNumberish;
    qualityScore: BigNumberish;
    isValidated: boolean;
    isPremium: boolean;
    views: BigNumberish;
    rewards: BigNumberish;
  };

  export type ImageDataStructOutput = [
    id: bigint,
    uploader: string,
    lighthouseCID: string,
    metadata: string,
    uploadTime: bigint,
    qualityScore: bigint,
    isValidated: boolean,
    isPremium: boolean,
    views: bigint,
    rewards: bigint
  ] & {
    id: bigint;
    uploader: string;
    lighthouseCID: string;
    metadata: string;
    uploadTime: bigint;
    qualityScore: bigint;
    isValidated: boolean;
    isPremium: boolean;
    views: bigint;
    rewards: bigint;
  };
}

export interface ImageDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCESS_FEE"
      | "MIN_STAKE"
      | "UPLOAD_REWARD"
      | "VALIDATION_REWARD"
      | "accessPremiumImage"
      | "becomeValidator"
      | "canAccessPremium"
      | "dataCoin"
      | "getImage"
      | "getTotalImages"
      | "getUserImages"
      | "hasValidated"
      | "images"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "uploadImage"
      | "userImages"
      | "validateImage"
      | "validators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImageUploaded"
      | "ImageValidated"
      | "OwnershipTransferred"
      | "PremiumAccess"
      | "RewardClaimed"
      | "ValidatorRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_STAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPLOAD_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATION_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessPremiumImage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeValidator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessPremium",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dataCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalImages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserImages",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidated",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "images",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadImage",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userImages",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateImage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ACCESS_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_STAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPLOAD_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATION_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessPremiumImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasValidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "images", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userImages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export namespace ImageUploadedEvent {
  export type InputTuple = [
    imageId: BigNumberish,
    uploader: AddressLike,
    cid: string
  ];
  export type OutputTuple = [imageId: bigint, uploader: string, cid: string];
  export interface OutputObject {
    imageId: bigint;
    uploader: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImageValidatedEvent {
  export type InputTuple = [
    imageId: BigNumberish,
    validator: AddressLike,
    score: BigNumberish
  ];
  export type OutputTuple = [imageId: bigint, validator: string, score: bigint];
  export interface OutputObject {
    imageId: bigint;
    validator: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumAccessEvent {
  export type InputTuple = [imageId: BigNumberish, accessor: AddressLike];
  export type OutputTuple = [imageId: bigint, accessor: string];
  export interface OutputObject {
    imageId: bigint;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRegisteredEvent {
  export type InputTuple = [validator: AddressLike, stakedAmount: BigNumberish];
  export type OutputTuple = [validator: string, stakedAmount: bigint];
  export interface OutputObject {
    validator: string;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ImageDAO extends BaseContract {
  connect(runner?: ContractRunner | null): ImageDAO;
  waitForDeployment(): Promise<this>;

  interface: ImageDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCESS_FEE: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE: TypedContractMethod<[], [bigint], "view">;

  UPLOAD_REWARD: TypedContractMethod<[], [bigint], "view">;

  VALIDATION_REWARD: TypedContractMethod<[], [bigint], "view">;

  accessPremiumImage: TypedContractMethod<
    [_imageId: BigNumberish],
    [void],
    "nonpayable"
  >;

  becomeValidator: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  canAccessPremium: TypedContractMethod<
    [_user: AddressLike],
    [boolean],
    "view"
  >;

  dataCoin: TypedContractMethod<[], [string], "view">;

  getImage: TypedContractMethod<
    [_imageId: BigNumberish],
    [ImageDAO.ImageDataStructOutput],
    "view"
  >;

  getTotalImages: TypedContractMethod<[], [bigint], "view">;

  getUserImages: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  hasValidated: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  images: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        uploader: string;
        lighthouseCID: string;
        metadata: string;
        uploadTime: bigint;
        qualityScore: bigint;
        isValidated: boolean;
        isPremium: boolean;
        views: bigint;
        rewards: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uploadImage: TypedContractMethod<
    [_cid: string, _metadata: string, _qualityScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  userImages: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  validateImage: TypedContractMethod<
    [_imageId: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        isActive: boolean;
        stakedAmount: bigint;
        validationsCount: bigint;
        reputationScore: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCESS_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPLOAD_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATION_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accessPremiumImage"
  ): TypedContractMethod<[_imageId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "becomeValidator"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canAccessPremium"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dataCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getImage"
  ): TypedContractMethod<
    [_imageId: BigNumberish],
    [ImageDAO.ImageDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalImages"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserImages"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasValidated"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "images"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        uploader: string;
        lighthouseCID: string;
        metadata: string;
        uploadTime: bigint;
        qualityScore: bigint;
        isValidated: boolean;
        isPremium: boolean;
        views: bigint;
        rewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uploadImage"
  ): TypedContractMethod<
    [_cid: string, _metadata: string, _qualityScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userImages"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateImage"
  ): TypedContractMethod<
    [_imageId: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        isActive: boolean;
        stakedAmount: bigint;
        validationsCount: bigint;
        reputationScore: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ImageUploaded"
  ): TypedContractEvent<
    ImageUploadedEvent.InputTuple,
    ImageUploadedEvent.OutputTuple,
    ImageUploadedEvent.OutputObject
  >;
  getEvent(
    key: "ImageValidated"
  ): TypedContractEvent<
    ImageValidatedEvent.InputTuple,
    ImageValidatedEvent.OutputTuple,
    ImageValidatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PremiumAccess"
  ): TypedContractEvent<
    PremiumAccessEvent.InputTuple,
    PremiumAccessEvent.OutputTuple,
    PremiumAccessEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRegistered"
  ): TypedContractEvent<
    ValidatorRegisteredEvent.InputTuple,
    ValidatorRegisteredEvent.OutputTuple,
    ValidatorRegisteredEvent.OutputObject
  >;

  filters: {
    "ImageUploaded(uint256,address,string)": TypedContractEvent<
      ImageUploadedEvent.InputTuple,
      ImageUploadedEvent.OutputTuple,
      ImageUploadedEvent.OutputObject
    >;
    ImageUploaded: TypedContractEvent<
      ImageUploadedEvent.InputTuple,
      ImageUploadedEvent.OutputTuple,
      ImageUploadedEvent.OutputObject
    >;

    "ImageValidated(uint256,address,uint256)": TypedContractEvent<
      ImageValidatedEvent.InputTuple,
      ImageValidatedEvent.OutputTuple,
      ImageValidatedEvent.OutputObject
    >;
    ImageValidated: TypedContractEvent<
      ImageValidatedEvent.InputTuple,
      ImageValidatedEvent.OutputTuple,
      ImageValidatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PremiumAccess(uint256,address)": TypedContractEvent<
      PremiumAccessEvent.InputTuple,
      PremiumAccessEvent.OutputTuple,
      PremiumAccessEvent.OutputObject
    >;
    PremiumAccess: TypedContractEvent<
      PremiumAccessEvent.InputTuple,
      PremiumAccessEvent.OutputTuple,
      PremiumAccessEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "ValidatorRegistered(address,uint256)": TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;
    ValidatorRegistered: TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;
  };
}
