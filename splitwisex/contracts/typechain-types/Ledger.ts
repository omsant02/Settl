/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addExpense"
      | "addMember"
      | "createGroup"
      | "createSettlementIntent"
      | "finalizeSettlement"
      | "isMember"
      | "nextExpenseId"
      | "nextGroupId"
      | "removeMember"
      | "voidExpense"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExpenseAdded"
      | "ExpenseVoided"
      | "GroupCreated"
      | "MemberAdded"
      | "MemberRemoved"
      | "SettlementFinalized"
      | "SettlementIntentCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addExpense",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values: [string, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createSettlementIntent",
    values: [BigNumberish, BytesLike, AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeSettlement",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextExpenseId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voidExpense",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addExpense", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSettlementIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextExpenseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voidExpense",
    data: BytesLike
  ): Result;
}

export namespace ExpenseAddedEvent {
  export type InputTuple = [
    groupId: BigNumberish,
    expenseId: BigNumberish,
    payer: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    splitData: BytesLike,
    cid: string,
    memo: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    groupId: bigint,
    expenseId: bigint,
    payer: string,
    token: string,
    amount: bigint,
    splitData: string,
    cid: string,
    memo: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    groupId: bigint;
    expenseId: bigint;
    payer: string;
    token: string;
    amount: bigint;
    splitData: string;
    cid: string;
    memo: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseVoidedEvent {
  export type InputTuple = [
    groupId: BigNumberish,
    expenseId: BigNumberish,
    actor: AddressLike
  ];
  export type OutputTuple = [groupId: bigint, expenseId: bigint, actor: string];
  export interface OutputObject {
    groupId: bigint;
    expenseId: bigint;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GroupCreatedEvent {
  export type InputTuple = [
    groupId: BigNumberish,
    creator: AddressLike,
    name: string,
    members: AddressLike[]
  ];
  export type OutputTuple = [
    groupId: bigint,
    creator: string,
    name: string,
    members: string[]
  ];
  export interface OutputObject {
    groupId: bigint;
    creator: string;
    name: string;
    members: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberAddedEvent {
  export type InputTuple = [groupId: BigNumberish, member: AddressLike];
  export type OutputTuple = [groupId: bigint, member: string];
  export interface OutputObject {
    groupId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRemovedEvent {
  export type InputTuple = [groupId: BigNumberish, member: AddressLike];
  export type OutputTuple = [groupId: bigint, member: string];
  export interface OutputObject {
    groupId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementFinalizedEvent {
  export type InputTuple = [
    receiptHash: BytesLike,
    groupId: BigNumberish,
    debtor: AddressLike,
    creditor: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    dstChainId: BigNumberish,
    dstTxHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    receiptHash: string,
    groupId: bigint,
    debtor: string,
    creditor: string,
    token: string,
    amount: bigint,
    dstChainId: bigint,
    dstTxHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    receiptHash: string;
    groupId: bigint;
    debtor: string;
    creditor: string;
    token: string;
    amount: bigint;
    dstChainId: bigint;
    dstTxHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementIntentCreatedEvent {
  export type InputTuple = [
    intentHash: BytesLike,
    groupId: BigNumberish,
    debtor: AddressLike,
    creditor: AddressLike,
    routeId: string
  ];
  export type OutputTuple = [
    intentHash: string,
    groupId: bigint,
    debtor: string,
    creditor: string,
    routeId: string
  ];
  export interface OutputObject {
    intentHash: string;
    groupId: bigint;
    debtor: string;
    creditor: string;
    routeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ledger extends BaseContract {
  connect(runner?: ContractRunner | null): Ledger;
  waitForDeployment(): Promise<this>;

  interface: LedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addExpense: TypedContractMethod<
    [
      groupId: BigNumberish,
      payer: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      splitData: BytesLike,
      cid: string,
      memo: string
    ],
    [bigint],
    "nonpayable"
  >;

  addMember: TypedContractMethod<
    [groupId: BigNumberish, member: AddressLike],
    [void],
    "nonpayable"
  >;

  createGroup: TypedContractMethod<
    [name: string, members: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  createSettlementIntent: TypedContractMethod<
    [
      groupId: BigNumberish,
      intentHash: BytesLike,
      debtor: AddressLike,
      creditor: AddressLike,
      routeId: string
    ],
    [void],
    "nonpayable"
  >;

  finalizeSettlement: TypedContractMethod<
    [
      groupId: BigNumberish,
      debtor: AddressLike,
      creditor: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      dstChainId: BigNumberish,
      dstTxHash: BytesLike,
      settleIntentHash: BytesLike,
      arg8: BytesLike,
      arg9: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isMember: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  nextExpenseId: TypedContractMethod<[], [bigint], "view">;

  nextGroupId: TypedContractMethod<[], [bigint], "view">;

  removeMember: TypedContractMethod<
    [groupId: BigNumberish, member: AddressLike],
    [void],
    "nonpayable"
  >;

  voidExpense: TypedContractMethod<
    [groupId: BigNumberish, expenseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addExpense"
  ): TypedContractMethod<
    [
      groupId: BigNumberish,
      payer: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      splitData: BytesLike,
      cid: string,
      memo: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMember"
  ): TypedContractMethod<
    [groupId: BigNumberish, member: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGroup"
  ): TypedContractMethod<
    [name: string, members: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSettlementIntent"
  ): TypedContractMethod<
    [
      groupId: BigNumberish,
      intentHash: BytesLike,
      debtor: AddressLike,
      creditor: AddressLike,
      routeId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeSettlement"
  ): TypedContractMethod<
    [
      groupId: BigNumberish,
      debtor: AddressLike,
      creditor: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      dstChainId: BigNumberish,
      dstTxHash: BytesLike,
      settleIntentHash: BytesLike,
      arg8: BytesLike,
      arg9: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextExpenseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextGroupId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeMember"
  ): TypedContractMethod<
    [groupId: BigNumberish, member: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voidExpense"
  ): TypedContractMethod<
    [groupId: BigNumberish, expenseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExpenseAdded"
  ): TypedContractEvent<
    ExpenseAddedEvent.InputTuple,
    ExpenseAddedEvent.OutputTuple,
    ExpenseAddedEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseVoided"
  ): TypedContractEvent<
    ExpenseVoidedEvent.InputTuple,
    ExpenseVoidedEvent.OutputTuple,
    ExpenseVoidedEvent.OutputObject
  >;
  getEvent(
    key: "GroupCreated"
  ): TypedContractEvent<
    GroupCreatedEvent.InputTuple,
    GroupCreatedEvent.OutputTuple,
    GroupCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MemberAdded"
  ): TypedContractEvent<
    MemberAddedEvent.InputTuple,
    MemberAddedEvent.OutputTuple,
    MemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRemoved"
  ): TypedContractEvent<
    MemberRemovedEvent.InputTuple,
    MemberRemovedEvent.OutputTuple,
    MemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementFinalized"
  ): TypedContractEvent<
    SettlementFinalizedEvent.InputTuple,
    SettlementFinalizedEvent.OutputTuple,
    SettlementFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementIntentCreated"
  ): TypedContractEvent<
    SettlementIntentCreatedEvent.InputTuple,
    SettlementIntentCreatedEvent.OutputTuple,
    SettlementIntentCreatedEvent.OutputObject
  >;

  filters: {
    "ExpenseAdded(uint256,uint256,address,address,uint256,bytes,string,string,uint256)": TypedContractEvent<
      ExpenseAddedEvent.InputTuple,
      ExpenseAddedEvent.OutputTuple,
      ExpenseAddedEvent.OutputObject
    >;
    ExpenseAdded: TypedContractEvent<
      ExpenseAddedEvent.InputTuple,
      ExpenseAddedEvent.OutputTuple,
      ExpenseAddedEvent.OutputObject
    >;

    "ExpenseVoided(uint256,uint256,address)": TypedContractEvent<
      ExpenseVoidedEvent.InputTuple,
      ExpenseVoidedEvent.OutputTuple,
      ExpenseVoidedEvent.OutputObject
    >;
    ExpenseVoided: TypedContractEvent<
      ExpenseVoidedEvent.InputTuple,
      ExpenseVoidedEvent.OutputTuple,
      ExpenseVoidedEvent.OutputObject
    >;

    "GroupCreated(uint256,address,string,address[])": TypedContractEvent<
      GroupCreatedEvent.InputTuple,
      GroupCreatedEvent.OutputTuple,
      GroupCreatedEvent.OutputObject
    >;
    GroupCreated: TypedContractEvent<
      GroupCreatedEvent.InputTuple,
      GroupCreatedEvent.OutputTuple,
      GroupCreatedEvent.OutputObject
    >;

    "MemberAdded(uint256,address)": TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;
    MemberAdded: TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;

    "MemberRemoved(uint256,address)": TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;
    MemberRemoved: TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;

    "SettlementFinalized(bytes32,uint256,address,address,address,uint256,uint256,bytes32,uint256)": TypedContractEvent<
      SettlementFinalizedEvent.InputTuple,
      SettlementFinalizedEvent.OutputTuple,
      SettlementFinalizedEvent.OutputObject
    >;
    SettlementFinalized: TypedContractEvent<
      SettlementFinalizedEvent.InputTuple,
      SettlementFinalizedEvent.OutputTuple,
      SettlementFinalizedEvent.OutputObject
    >;

    "SettlementIntentCreated(bytes32,uint256,address,address,string)": TypedContractEvent<
      SettlementIntentCreatedEvent.InputTuple,
      SettlementIntentCreatedEvent.OutputTuple,
      SettlementIntentCreatedEvent.OutputObject
    >;
    SettlementIntentCreated: TypedContractEvent<
      SettlementIntentCreatedEvent.InputTuple,
      SettlementIntentCreatedEvent.OutputTuple,
      SettlementIntentCreatedEvent.OutputObject
    >;
  };
}
