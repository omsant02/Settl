// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ExpenseAdded extends ethereum.Event {
  get params(): ExpenseAdded__Params {
    return new ExpenseAdded__Params(this);
  }
}

export class ExpenseAdded__Params {
  _event: ExpenseAdded;

  constructor(event: ExpenseAdded) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get splitData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get cid(): string {
    return this._event.parameters[6].value.toString();
  }

  get memo(): string {
    return this._event.parameters[7].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class ExpenseVoided extends ethereum.Event {
  get params(): ExpenseVoided__Params {
    return new ExpenseVoided__Params(this);
  }
}

export class ExpenseVoided__Params {
  _event: ExpenseVoided;

  constructor(event: ExpenseVoided) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get actor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class GroupCreated extends ethereum.Event {
  get params(): GroupCreated__Params {
    return new GroupCreated__Params(this);
  }
}

export class GroupCreated__Params {
  _event: GroupCreated;

  constructor(event: GroupCreated) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get members(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class MemberAdded extends ethereum.Event {
  get params(): MemberAdded__Params {
    return new MemberAdded__Params(this);
  }
}

export class MemberAdded__Params {
  _event: MemberAdded;

  constructor(event: MemberAdded) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MemberRemoved extends ethereum.Event {
  get params(): MemberRemoved__Params {
    return new MemberRemoved__Params(this);
  }
}

export class MemberRemoved__Params {
  _event: MemberRemoved;

  constructor(event: MemberRemoved) {
    this._event = event;
  }

  get groupId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SettlementFinalized extends ethereum.Event {
  get params(): SettlementFinalized__Params {
    return new SettlementFinalized__Params(this);
  }
}

export class SettlementFinalized__Params {
  _event: SettlementFinalized;

  constructor(event: SettlementFinalized) {
    this._event = event;
  }

  get receiptHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get groupId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creditor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get dstChainId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get dstTxHash(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class SettlementIntentCreated extends ethereum.Event {
  get params(): SettlementIntentCreated__Params {
    return new SettlementIntentCreated__Params(this);
  }
}

export class SettlementIntentCreated__Params {
  _event: SettlementIntentCreated;

  constructor(event: SettlementIntentCreated) {
    this._event = event;
  }

  get intentHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get groupId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creditor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get routeId(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Ledger extends ethereum.SmartContract {
  static bind(address: Address): Ledger {
    return new Ledger("Ledger", address);
  }

  addExpense(
    groupId: BigInt,
    payer: Address,
    token: Address,
    amount: BigInt,
    splitData: Bytes,
    cid: string,
    memo: string,
  ): BigInt {
    let result = super.call(
      "addExpense",
      "addExpense(uint256,address,address,uint256,bytes,string,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(groupId),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(splitData),
        ethereum.Value.fromString(cid),
        ethereum.Value.fromString(memo),
      ],
    );

    return result[0].toBigInt();
  }

  try_addExpense(
    groupId: BigInt,
    payer: Address,
    token: Address,
    amount: BigInt,
    splitData: Bytes,
    cid: string,
    memo: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addExpense",
      "addExpense(uint256,address,address,uint256,bytes,string,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(groupId),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(splitData),
        ethereum.Value.fromString(cid),
        ethereum.Value.fromString(memo),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createGroup(name: string, members: Array<Address>): BigInt {
    let result = super.call(
      "createGroup",
      "createGroup(string,address[]):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddressArray(members),
      ],
    );

    return result[0].toBigInt();
  }

  try_createGroup(
    name: string,
    members: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createGroup",
      "createGroup(string,address[]):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddressArray(members),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMember(param0: BigInt, param1: Address): boolean {
    let result = super.call("isMember", "isMember(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBoolean();
  }

  try_isMember(param0: BigInt, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMember", "isMember(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextExpenseId(): BigInt {
    let result = super.call("nextExpenseId", "nextExpenseId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextExpenseId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextExpenseId",
      "nextExpenseId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextGroupId(): BigInt {
    let result = super.call("nextGroupId", "nextGroupId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextGroupId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextGroupId", "nextGroupId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddExpenseCall extends ethereum.Call {
  get inputs(): AddExpenseCall__Inputs {
    return new AddExpenseCall__Inputs(this);
  }

  get outputs(): AddExpenseCall__Outputs {
    return new AddExpenseCall__Outputs(this);
  }
}

export class AddExpenseCall__Inputs {
  _call: AddExpenseCall;

  constructor(call: AddExpenseCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get splitData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get cid(): string {
    return this._call.inputValues[5].value.toString();
  }

  get memo(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class AddExpenseCall__Outputs {
  _call: AddExpenseCall;

  constructor(call: AddExpenseCall) {
    this._call = call;
  }

  get eid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class CreateGroupCall extends ethereum.Call {
  get inputs(): CreateGroupCall__Inputs {
    return new CreateGroupCall__Inputs(this);
  }

  get outputs(): CreateGroupCall__Outputs {
    return new CreateGroupCall__Outputs(this);
  }
}

export class CreateGroupCall__Inputs {
  _call: CreateGroupCall;

  constructor(call: CreateGroupCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get members(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class CreateGroupCall__Outputs {
  _call: CreateGroupCall;

  constructor(call: CreateGroupCall) {
    this._call = call;
  }

  get gid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSettlementIntentCall extends ethereum.Call {
  get inputs(): CreateSettlementIntentCall__Inputs {
    return new CreateSettlementIntentCall__Inputs(this);
  }

  get outputs(): CreateSettlementIntentCall__Outputs {
    return new CreateSettlementIntentCall__Outputs(this);
  }
}

export class CreateSettlementIntentCall__Inputs {
  _call: CreateSettlementIntentCall;

  constructor(call: CreateSettlementIntentCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get intentHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get debtor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get creditor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get routeId(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateSettlementIntentCall__Outputs {
  _call: CreateSettlementIntentCall;

  constructor(call: CreateSettlementIntentCall) {
    this._call = call;
  }
}

export class FinalizeSettlementCall extends ethereum.Call {
  get inputs(): FinalizeSettlementCall__Inputs {
    return new FinalizeSettlementCall__Inputs(this);
  }

  get outputs(): FinalizeSettlementCall__Outputs {
    return new FinalizeSettlementCall__Outputs(this);
  }
}

export class FinalizeSettlementCall__Inputs {
  _call: FinalizeSettlementCall;

  constructor(call: FinalizeSettlementCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get debtor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get creditor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get dstChainId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get dstTxHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get settleIntentHash(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get value8(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get value9(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class FinalizeSettlementCall__Outputs {
  _call: FinalizeSettlementCall;

  constructor(call: FinalizeSettlementCall) {
    this._call = call;
  }
}

export class RemoveMemberCall extends ethereum.Call {
  get inputs(): RemoveMemberCall__Inputs {
    return new RemoveMemberCall__Inputs(this);
  }

  get outputs(): RemoveMemberCall__Outputs {
    return new RemoveMemberCall__Outputs(this);
  }
}

export class RemoveMemberCall__Inputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveMemberCall__Outputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }
}

export class VoidExpenseCall extends ethereum.Call {
  get inputs(): VoidExpenseCall__Inputs {
    return new VoidExpenseCall__Inputs(this);
  }

  get outputs(): VoidExpenseCall__Outputs {
    return new VoidExpenseCall__Outputs(this);
  }
}

export class VoidExpenseCall__Inputs {
  _call: VoidExpenseCall;

  constructor(call: VoidExpenseCall) {
    this._call = call;
  }

  get groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expenseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class VoidExpenseCall__Outputs {
  _call: VoidExpenseCall;

  constructor(call: VoidExpenseCall) {
    this._call = call;
  }
}
